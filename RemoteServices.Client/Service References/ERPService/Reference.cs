//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteServices.Client.ERPService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ERPService.IERPService")]
    public interface IERPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/GetInventory", ReplyAction="http://tempuri.org/IERPService/GetInventoryResponse")]
        byte[] GetInventory(string appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/GetInventoryByBranch", ReplyAction="http://tempuri.org/IERPService/GetInventoryByBranchResponse")]
        byte[] GetInventoryByBranch(string appId, string branch, bool inclCrossRefData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/GetOrderConfirmations", ReplyAction="http://tempuri.org/IERPService/GetOrderConfirmationsResponse")]
        byte[] GetOrderConfirmations(string appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/GetOrders", ReplyAction="http://tempuri.org/IERPService/GetOrdersResponse")]
        byte[] GetOrders(string orderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/MarkOrderConfirmation", ReplyAction="http://tempuri.org/IERPService/MarkOrderConfirmationResponse")]
        bool MarkOrderConfirmation(out string error, string orderId, string lineNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/MarkShippingConfirmation", ReplyAction="http://tempuri.org/IERPService/MarkShippingConfirmationResponse")]
        bool MarkShippingConfirmation(out string error, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IERPService/GetShippingConfirmations", ReplyAction="http://tempuri.org/IERPService/GetShippingConfirmationsResponse")]
        byte[] GetShippingConfirmations(string appId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IERPServiceChannel : RemoteServices.Client.ERPService.IERPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ERPServiceClient : System.ServiceModel.ClientBase<RemoteServices.Client.ERPService.IERPService>, RemoteServices.Client.ERPService.IERPService {
        
        public ERPServiceClient() {
        }
        
        public ERPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ERPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ERPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ERPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetInventory(string appId) {
            return base.Channel.GetInventory(appId);
        }
        
        public byte[] GetInventoryByBranch(string appId, string branch, bool inclCrossRefData) {
            return base.Channel.GetInventoryByBranch(appId, branch, inclCrossRefData);
        }
        
        public byte[] GetOrderConfirmations(string appId) {
            return base.Channel.GetOrderConfirmations(appId);
        }
        
        public byte[] GetOrders(string orderIds) {
            return base.Channel.GetOrders(orderIds);
        }
        
        public bool MarkOrderConfirmation(out string error, string orderId, string lineNumber) {
            return base.Channel.MarkOrderConfirmation(out error, orderId, lineNumber);
        }
        
        public bool MarkShippingConfirmation(out string error, string orderId) {
            return base.Channel.MarkShippingConfirmation(out error, orderId);
        }
        
        public byte[] GetShippingConfirmations(string appId) {
            return base.Channel.GetShippingConfirmations(appId);
        }
    }
}
